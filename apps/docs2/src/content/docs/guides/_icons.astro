---
import type { AstroComponentFactory } from "astro/runtime/server/index.js";
import { Code } from "@astrojs/starlight/components";
import flowbiteStyles from "@sjsf/flowbite-icons/styles.css?inline";

import {
  type IconsPackage,
  ICONS_PACKAGE_TITLES,
  ICONS_PACKAGE_NAMES,
  ICONS_PACKAGES,
  iconsPkg,
} from "@/shared";
import FormCard from "@/components/form-card.astro";
import Npm from "@/components/npm.astro";

import IconsDemo from "./icons-demo.svelte";
import FlowbiteIconsInstall from "./_flowbite-icons-install.md";

const STYLES: Partial<Record<IconsPackage, string>> = {
  flowbite: flowbiteStyles,
};

const ADDITIONAL: Partial<Record<IconsPackage, AstroComponentFactory>> = {
  flowbite: FlowbiteIconsInstall,
};

const styles = ICONS_PACKAGES.map(
  (pkg) => `
  .theme-tabs:has(.theme-tab[data-theme="${pkg}"]:checked) ~ .theme-content[data-theme="${pkg}"] {
    display: block;
    height: 100%;
  }`
).join("\n");

const createUsageCode = (pkg: string) => `<script lang="ts">
  import { createForm } from '@sjsf/form';
  import { icons } from '${pkg}';

  const form = createForm({
    icons,
    ...
  })
</script>`;
---

<div class="theme-tabs">
  {
    ICONS_PACKAGES.map((theme) => (
      <input
        type="radio"
        name="theme-input"
        class="theme-tab"
        aria-label={ICONS_PACKAGE_TITLES[theme]}
        checked={theme === "lucide"}
        data-theme={theme}
      />
    ))
  }
</div>
<>
  {
    ICONS_PACKAGES.map((pkg) => {
      const Additional = ADDITIONAL[pkg];
      return (
        <div class="theme-content" data-theme={pkg}>
          <Npm pkg={iconsPkg(pkg)} />
          {Additional && <Additional />}

          <h3 id="usage">Usage</h3>

          <Code
            code={createUsageCode(ICONS_PACKAGE_NAMES[pkg])}
            lang="typescript"
          />

          <FormCard style={STYLES[pkg]}>
            <IconsDemo client:only="svelte" pkg={pkg} />
          </FormCard>
        </div>
      );
    })
  }
</>

<style>
  .theme-tabs {
    z-index: 10;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
    position: sticky;
    top: calc(56px + 48px + 0.5rem);
  }
  @media (min-width: 50rem) {
    .theme-tabs {
      top: calc(64px + 48px + 1rem);
    }
  }
  @media (min-width: 72rem) {
    .theme-tabs {
      top: calc(64px + 1rem);
    }
  }
  .theme-tab {
    min-width: fit-content;
    appearance: none;
    cursor: pointer;
    text-align: center;
    user-select: none;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    display: inline-flex;
    padding-inline: 1.25rem;
    padding-block: 0.15rem;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 2rem;
    background-color: var(--sl-color-bg);
    box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
    /* box-shadow: var(--sl-shadow-md); */
    &:after {
      content: attr(aria-label);
    }
    &:checked {
      background-color: var(--sl-color-gray-5);
      border-color: var(--sl-color-text-accent);
    }
  }
  .theme-content {
    display: none;
    width: 100%;
    order: 1;
    margin-top: 1rem;
    &:nth-child(2) > :global(:nth-child(2)) {
      margin-top: 0;
    }
  }
</style>

<style set:html={styles}></style>
